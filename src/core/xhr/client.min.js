/**
 * XHRClient decorates the jQuery ajax method or equivalent
 * with functionlity for AWS API Gatway support in strict lint
 * manner
 *
 * By default all request are treated as 'application/json' type.
 * For Cross Origin Resource Sharing the 'Allow' header is set
 * with a wildcard scope.
 *
 *  CHANGELOG
 *
 *  1. Added new request method; put()
 *  2. Added new request method; delete()
 *
 */
(function _arc() {
    /**
     * [XHRClient description]
     */
    this.XHRClient = function() {
        var _clientManager = {};
        var _queryString = null;
        var _invokeUrl;
        var _requestHandler;
        var _allowedMethods = ['GET', 'POST', 'PUT', 'DELETE'];
        var _requestConfig = {
            contentType: 'application/json',
            dataType: 'json',
            headers: {
                'Allow': '*',
            },
        };

        /**
         * Validate if the given method is allowed
         * @param  {[type]} method [description]
         * @return {[type]}        [description]
         */
        function validateHttpMethod(method) {
            if (_allowedMethods.indexOf(method) < 0) {
                throw new Error('InvalidMethod in arc.core.xhr.client.validateHttpMethod, line: 34');
            }
            return method;
        }

        /**
         * [templateUri description]
         * @param  {[type]} uri         [description]
         * @param  {[type]} queryString [description]
         * @return {string} formatted url
         */
        _clientManager.templateUri = function(uri, queryString) {
            var _url = _invokeUrl + uri,
                _queryString = null;

            if (isNull(queryString)) {
                return _url;
            }

            if (typeof queryString === 'object' && Object.keys(queryString) > 0) {
                Object.keys(queryString).forEach(function(key) {
                    _queryString += _queryString ? '&' : '?';
                    _queryString += key + '=' + this[key];
                }, queryString);

                return _url + _queryString;
            }

            return _url;
        };

        /**
         * [parsePayloadBody description]
         * @param  {[type]} payloadBody [description]
         * @return {[type]}             [description]
         */
        _clientManager.parsePayloadBody = function(payloadBody) {
            let body = '';

            if (_requestConfig.contentType == 'application/json') {
                body = JSON.stringify(payloadBody || {});
            } else {
                Object.keys(payloadBody).forEach(function(key) {
                    body += body != '' ? '&' : '';
                    body += key + '=' + this[key];
                }, payloadBody);
            }

            return body;
        };

        /**
         * [makeRequest description]
         * @param  {[type]} request          [description]
         * @param  {[type]} completeCallback [description]
         */
        _clientManager.makeRequest = function(_req, completeCallback) {
            _requestConfig.method = validateHttpMethod(_req.method);
            _requestConfig.url = _clientManager.templateUri(
                _req.path,
                _req.queryString,
            );

            //if (isSet(_req.payload) && !isNull(_req.payload)) {
            if (!isNull(_req.payload)) {
                _requestConfig.data = _clientManager.parsePayloadBody(_req.payload);
            }else{
                _requestConfig.data = null
                try{
                    delete _requestConfig.data
                }catch(err){
                    alert(err)
                }
            }

            if (isNull(_requestHandler)) {
                throw new Error(
                    'InvalidMethod in arc.core.xhr.client._clientManager.makeRequest, line: 102');
            }

            _requestHandler(_requestConfig).always(completeCallback);
        };

        /**
         * [setContentType description]
         * @param {[type]} ct [description]
         */
        this.setContentType = function setContentType(ct) {
            _requestConfig.contentType = ct;
        };

        /**
         * Set Authentication Header.
         * @param {string} token -- Sets the header 'Authorization'with a
         * pre-defined token hash.
         */
        this.setAuthorization = function setAuthorization(token) {
            // Designed to work with Cognito Authentication service.
            _requestConfig.headers['Authorization'] = token;
        };

        /**
         * Setup the API settings
         * @param {string} apiKey    Sets the header 'x-api-key' with a pre-defined hash key.
         *                           Designed to work with Amazon API Gateway service.
         * @param {string} invokeUrl Sets the API url.
         */
        this.setApiSettings = function(apiKey, invokeUrl) {
            if (apiKey) {
                _requestConfig.headers['x-api-key'] = apiKey;
            }

            if (invokeUrl) {
                _invokeUrl = invokeUrl;
            }
        };

        /**
         * Setup a Xml Http Request Handler
         * @param {object} requestHandler, Object in charge of perform the async server calls.
         *                                 Designed to work with jQuery $.ajax object methods.
         */
        this.setRequestHandler = function(requestHandler) {
            _requestHandler = requestHandler;
        };

        /**
         * Perform a HTTP POST method request to an API endpoint
         * @param  {string}   urlPath     API endpoint path, must include '/' at the begin.
         * @param  {object}   queryString URL Parameters object
         * @param  {function} callback    Executed on complete request
         *                                Designed to be agnostic to the response code.
         */
        this.get = function(urlPath, queryString, callback) {
            _clientManager.makeRequest({
                    path: urlPath,
                    method: 'GET',
                    queryString: queryString,
                    payload: null
                },
                callback,
            );
        };

        /**
         * Consume an enpoint by HTTP POST Request
         *
         * @param  {string}   urlPath        API Endpoint path, must include '/' at the begin.
         * @param  {object}   queryString    URL Parameters object
         * @param  {object}   payloadBody    Raw body object sent in POST requests
         * @param  {function} callback       Executed on complete request
         *                                   Designed to be agnostic to the response code.
         */
        this.post = function(urlPath, queryString, payloadBody, callback) {
            _clientManager.makeRequest({
                    path: urlPath,
                    method: 'POST',
                    queryString: queryString,
                    payload: payloadBody,
                },
                callback,
            );
        };


        this.put = function(urlPath, queryString, payloadBody, callback) {
            _clientManager.makeRequest({
                path: urlPath,
                method: 'PUT',
                queryString: queryString,
                payload: payloadBody,
            }, callback);
        };


        this.delete = function(urlPath, queryString, payloadBody, callback) {
            _clientManager.makeRequest({
                path: urlPath,
                method: 'DELETE',
                queryString: queryString,
                payload: payloadBody,
            }, callback);
        };
    };
}).apply(this);