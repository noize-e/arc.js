/**
 * This XHR client object designed to work with
 * Amazon API Gateway and Cognito Auth services
 *
 * By default all request are treated as 'application/json' type.
 * For Cross Origin Resource Sharing the 'Allow' header is set
 * with a wildcard scope.
 *
 */
(function arcXhrClient(global) {
  /**
     * [XHRClient description]
     */
  global.XHRClient = function() {
    const _clientManager = {};
    let _queryString = null;
    let _invokeUrl;
    let _requestHandler;
    const _allowedMethods = ['GET', 'POST'];
    const _requestConfig = {
      contentType: 'application/json',
      dataType: 'json',
      headers: {
        'Allow': '*',
      },
    };

    /**
         * Validate if the given method is allowed
         * @param  {[type]} method [description]
         * @return {[type]}        [description]
         */
    function validateHttpMethod(method) {
      if (_allowedMethods.indexOf(method) < 0) {
        throw new Error('InvalidMethod in arc.core.xhr.client.validateHttpMethod, line: 34');
      }
      return method;
    }

    /**
         * [templateUri description]
         * @param  {[type]} uri         [description]
         * @param  {[type]} queryString [description]
         * @return {string} formatted url
         */
    _clientManager.templateUri = function(uri, queryString) {
      const url = _invokeUrl + uri;

      if (!queryString) {
        return url;
      }

      if (typeof queryString === 'object' && Object.keys(queryString) > 0) {
        Object.keys(queryString).forEach(function(key) {
          _queryString += _queryString ? '&' : '?';
          _queryString += key + '=' + this[key];
        }, queryString);

        return url + _queryString;
      }

      return url;
    };

    /**
         * [parsePayloadBody description]
         * @param  {[type]} payloadBody [description]
         * @return {[type]}             [description]
         */
    _clientManager.parsePayloadBody = function(payloadBody) {
      let body = '';

      if (_requestConfig.contentType == 'application/json') {
        body = JSON.stringify(payloadBody || {});
      } else {
        Object.keys(payloadBody).forEach(function(key) {
          body += body != '' ? '&' : '';
          body += key + '=' + this[key];
        }, payloadBody);
      }

      return body;
    };

    /**
         * [makeRequest description]
         * @param  {[type]} request          [description]
         * @param  {[type]} completeCallback [description]
         */
    _clientManager.makeRequest = function(request, completeCallback) {
      _requestConfig.method = validateHttpMethod(request.method);
      _requestConfig.url = _clientManager.templateUri(
          request.path,
          request.queryString,
      );

      if (request.payload) {
        _requestConfig.data = _clientManager.parsePayloadBody(request.payload);
      }

      if (_requestHandler == null) {
        throw new Error(
            'InvalidMethod in arc.core.xhr.client._clientManager.makeRequest, line: 102');
      }

      _requestHandler(_requestConfig).always(completeCallback);
    };

    /**
         * [setContentType description]
         * @param {[type]} ct [description]
         */
    this.setContentType = function setContentType(ct) {
      _requestConfig.contentType = ct;
    };

    /**
     * Set Authentication Header.
     * @param {string} token -- Sets the header 'Authorization'with a
     * pre-defined token hash.
     */
    this.setAuthorization = function setAuthorization(token) {
      // Designed to work with Cognito Authentication service.
      _requestConfig.headers['Authorization'] = token;
    };

    /**
         * Setup the API settings
         * @param {string} apiKey    Sets the header 'x-api-key' with a pre-defined hash key.
         *                           Designed to work with Amazon API Gateway service.
         * @param {string} invokeUrl Sets the API url.
         */
    this.setApiSettings = function(apiKey, invokeUrl) {
      if (apiKey) {
        _requestConfig.headers['x-api-key'] = apiKey;
      }

      if (invokeUrl) {
        _invokeUrl = invokeUrl;
      }
    };

    /**
         * Setup a Xml Http Request Handler
         * @param {object} requestHandler, Object in charge of perform the async server calls.
         *                                 Designed to work with jQuery $.ajax object methods.
         */
    this.setRequestHandler = function(requestHandler) {
      _requestHandler = requestHandler;
    };

    /**
         * Consume an enpoint by HTTP POST Request
         * @param  {[type]}   urlPath     API Endpoint path, must include '/' at the begin.
         * @param  {[type]}   queryString URL Parameters object
         * @param  {Function} callback    Executed on complete request
         *                                Designed to be agnostic to the response code.
         */
    this.get = function(urlPath, queryString, callback) {
      _clientManager.makeRequest({
        path: urlPath,
        method: 'GET',
        queryString: queryString,
      },
      callback,
      );
    };

    /**
         * Consume an enpoint by HTTP POST Request
         * @param  {string}   urlPath     API Endpoint path, must include '/' at the begin.
         * @param  {object}   queryString URL Parameters object
         * @param  {object}   payloadBody Raw body object sent in POST requests
         * @param  {Function} callback    Executed on complete request
         *                                Designed to be agnostic to the response code.
         */
    this.post = function(urlPath, queryString, payloadBody, callback) {
      _clientManager.makeRequest({
        path: urlPath,
        method: 'POST',
        queryString: queryString,
        payload: payloadBody,
      },
      callback,
      );
    };
  };
})(window);
